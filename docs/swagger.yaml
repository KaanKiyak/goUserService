basePath: /
definitions:
  model.User:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  user.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: tech@deneme.com
    name: kaan Tech Team
    url: http://tech.deneme.com/
  description: This is a sample website user service API for deneme.com.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Service API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Kullanıcı e-posta ve şifre ile giriş yapar, access ve refresh token
        döner
      parameters:
      - description: Giriş bilgileri
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: access_token döner
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: İstek hatalı
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "401":
          description: Geçersiz kullanıcı bilgisi
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Sunucu hatası
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Kullanıcı Girişi
      tags:
      - Auth
  /logout:
    post:
      consumes:
      - application/json
      description: Refresh token ve access token doğrulanır, Redis'ten refresh token
        silinir, cookie temizlenir
      produces:
      - application/json
      responses:
        "200":
          description: Logout başarılı
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Token bulunamadı veya geçersiz
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Sunucu hatası
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Kullanıcı Çıkışı (Logout)
      tags:
      - Auth
  /profile:
    get:
      consumes:
      - application/json
      description: Bearer token ile giriş yapan kullanıcının profil bilgilerini döner
      produces:
      - application/json
      responses:
        "200":
          description: Kullanıcı bilgisi
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Geçersiz veya eksik token
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Sunucu hatası
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Kullanıcı Profil Bilgisi
      tags:
      - User
  /refresh:
    post:
      consumes:
      - application/json
      description: Geçerli refresh token kullanılarak yeni bir access token üretilir
      produces:
      - application/json
      responses:
        "200":
          description: Yeni access token döner
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Refresh token yok veya geçersiz
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Sunucu hatası
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Access Token Yenileme
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    description: Bearer {token}
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
